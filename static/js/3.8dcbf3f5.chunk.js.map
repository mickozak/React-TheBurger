{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","_home_programowanie4_Pulpit_Luty_React_TheBurger_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsAray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_7__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_11__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_13__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_8__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.8dcbf3f5.chunk.js","sourcesContent":["import React from 'react'\n\nimport classes from './Input.css'\n\nconst input = (props) => {\n    let inputElement = null\n    const inputClasses = [classes.InputElement]\n\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch(props.elementType){\n        case('input'):\n            inputElement = <input className={inputClasses.join(' ')} \n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed}/>;\n            break\n        case('textarea'):\n            inputElement = <textarea className={inputClasses} \n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed}/>;\n            break\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input className={inputClasses} \n            {...props.elementConfig}\n            value={props.value}/>\n    }\n\n\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\n\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\"};","import React, { Component } from 'react'\nimport Input from '../../components/UI/Input/Input'\nimport Button from '../../components/UI/Button/Button'\nimport classes from './Auth.css'\nimport * as actions from '../../store/actions/index'\nimport Spinner from '../../components/UI/Spinner/Spinner'\n\nimport { connect } from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nimport {updateObject, checkValidity} from '../../shared/utility'\n\nclass Auth extends Component{\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    componentDidMount(){\n        if(!this.props.buildingBurger && this.props.authRedirectPath !=='/'){\n            this.props.onSetAuthRedirectPath()\n        }\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        })\n        this.setState({\n            controls: updatedControls\n        })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault()\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup)\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState=>{\n            return {isSignup: !prevState.isSignup}\n        })\n    }\n\n\n    render(){\n        const formElementsAray = []\n        for (let key in this.state.controls){\n            formElementsAray.push({\n                id: key,\n                config: this.state.controls[key]\n            })\n        }\n\n        let form = formElementsAray.map(formElement=>(\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                changed={(event)=>this.inputChangedHandler(event, formElement.id)}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                value={formElement.config.value}\n            />\n            \n        ))\n\n        if(this.props.loading) {\n            form = <Spinner/>\n        } \n\n        let errorMessage = null\n\n        if(this.props.error){\n            errorMessage = (<p>{this.props.error.message}</p>)\n        }\n\n        let authRedirect = null\n        if(this.props.isAuthenticated){\n            authRedirect=<Redirect to={this.props.authRedirectPath}/>\n        }\n\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                clicked={this.switchAuthModeHandler}\n                btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'}</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onAuth: (email,password, isSignup) => dispatch(actions.auth(email,password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth)"],"sourceRoot":""}