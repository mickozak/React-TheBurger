{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","_this","setState","loading","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderHandler","token","inputChangedHandler","inputIdentifier","updateFormElement","updateObject","target","checkValidity","updateOrderForm","defineProperty","_this2","this","formElementsAray","id","config","form","onSubmit","formElement","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","Route","path","match","component"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAuDeE,IAnDD,SAACC,GACX,IAAIC,EAAe,KACbC,EAAe,CAACC,IAAQC,cAO9B,OAJGJ,EAAMK,SAAWL,EAAMM,gBAAkBN,EAAMO,SAC9CL,EAAaM,KAAKL,IAAQM,SAGvBT,EAAMU,aACT,IAAK,QACDT,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CAAOC,UAAWb,EAAac,KAAK,MAC/ChB,EAAMiB,cADK,CAEfC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WAChB,MACJ,IAAK,WACDnB,EAAeN,EAAAgB,EAAAC,cAAA,WAAAC,OAAAC,OAAA,CAAUC,UAAWb,GAChCF,EAAMiB,cADK,CAEfC,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,WAChB,MACJ,IAAO,SACHnB,EACIN,EAAAgB,EAAAC,cAAA,UACIG,UAAWb,EACXgB,MAAOlB,EAAMkB,MACbC,SAAUnB,EAAMoB,SACfpB,EAAMiB,cAAcI,QAAQC,IAAI,SAAAC,GAAM,OACnC5B,EAAAgB,EAAAC,cAAA,UAAQY,IAAKD,EAAOL,MAAOA,MAAOK,EAAOL,OACpCK,EAAOE,iBAKxB,MACJ,QACIxB,EAAeN,EAAAgB,EAAAC,cAAA,QAAAC,OAAAC,OAAA,CAAOC,UAAWb,GAC7BF,EAAMiB,cADK,CAEfC,MAAOlB,EAAMkB,SAIrB,OACIvB,EAAAgB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQuB,OACpB/B,EAAAgB,EAAAC,cAAA,SAAOG,UAAWZ,IAAQwB,OAAQ3B,EAAM4B,OACvC3B,yBCjDb4B,EAAAC,QAAA,CAAkBJ,MAAA,sBAAAC,MAAA,sBAAAvB,aAAA,6BAAAK,QAAA,8CCAlBoB,EAAAC,QAAA,CAAkBC,gBAAA,gECAlBF,EAAAC,QAAA,CAAkBE,YAAA,qKCmBHC,EAbS,SAACjC,GACrB,OACIkC,EAAAvB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQ4B,iBACpBG,EAAAvB,EAAAC,cAAA,qCACAsB,EAAAvB,EAAAC,cAAA,OAAKuB,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChCH,EAAAvB,EAAAC,cAAC0B,EAAA,EAAD,CAAQC,YAAavC,EAAMuC,eAE/BL,EAAAvB,EAAAC,cAAC4B,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAAS1C,EAAM2C,mBAAxC,UACAT,EAAAvB,EAAAC,cAAC4B,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS1C,EAAM4C,mBAAzC,gGCANZ,6MACFa,MAAQ,CACJC,UAAW,CACPC,KAAM,CACFrC,YAAa,QACbO,cAAe,CACX+B,KAAM,OACNC,YAAa,aAEjB/B,MAAO,GACPgC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACP7C,SAAS,GAEb8C,OAAQ,CACJ3C,YAAa,QACbO,cAAe,CACX+B,KAAM,OACNC,YAAa,UAEjB/B,MAAO,GACPgC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACP7C,SAAS,GAEb+C,QAAS,CACL5C,YAAa,QACbO,cAAe,CACX+B,KAAM,OACNC,YAAa,YAEjB/B,MAAO,GACPgC,WAAY,CACRC,UAAU,EACVI,UAAW,EACXC,UAAW,GAEfJ,OAAO,EACP7C,SAAS,GAEbkD,QAAS,CACL/C,YAAa,QACbO,cAAe,CACX+B,KAAM,OACNC,YAAa,WAEjB/B,MAAO,GACPgC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACP7C,SAAS,GAEbmD,MAAO,CACHhD,YAAa,QACbO,cAAe,CACX+B,KAAM,QACNC,YAAa,eAEjB/B,MAAO,GACPgC,WAAY,CACRC,UAAU,GAEdC,OAAO,EACP7C,SAAS,GAEboD,eAAgB,CACZjD,YAAa,SACbO,cAAe,CACXI,QAAS,CACL,CAACH,MAAO,UAAWO,aAAc,WACjC,CAACP,MAAO,WAAYO,aAAc,cAG1CP,MAAO,UACPgC,WAAY,GACZE,OAAO,IAGfQ,aAAa,KAGjBC,aAAe,SAAEC,GACbA,EAAMC,iBACNC,EAAKC,SAAU,CAAEC,SAAS,IAC1B,IAAMC,EAAW,GACjB,IAAI,IAAIC,KAAyBJ,EAAKnB,MAAMC,UACxCqB,EAASC,GAAyBJ,EAAKnB,MAAMC,UAAUsB,GAAuBlD,MAElF,IAAMmD,EAAQ,CACV9B,YAAayB,EAAKhE,MAAMsE,KACxBC,MAAOP,EAAKhE,MAAMuE,MAClBC,UAAWL,EACXM,OAAQT,EAAKhE,MAAMyE,QAEvBT,EAAKhE,MAAM0E,eAAeL,EAAOL,EAAKhE,MAAM2E,UAGhDC,oBAAsB,SAACd,EAAOe,GAG1B,IAAMC,EAAoBC,YAAaf,EAAKnB,MAAMC,UAAU+B,GAAiB,CACzE3D,MAAO4C,EAAMkB,OAAO9D,MACpBkC,MAAO6B,YAAcnB,EAAMkB,OAAO9D,MAAO8C,EAAKnB,MAAMC,UAAU+B,GAAiB3B,YAC/E3C,SAAS,IAGP2E,EAAkBH,YAAaf,EAAKnB,MAAMC,UAAZjC,OAAAsE,EAAA,EAAAtE,CAAA,GAC/BgE,EAAkBC,IAEvBI,EAAgBL,GAAmBC,EAEnC,IAAIlB,GAAc,EAClB,IAAI,IAAIiB,KAAmBK,EACvBtB,EAAcsB,EAAgBL,GAAiBzB,OAASQ,EAG5DI,EAAKC,SAAS,CACVnB,UAAWoC,EAAiBtB,YAAaA,6EAIvC,IAAAwB,EAAAC,KACAC,EAAmB,GACzB,IAAK,IAAI9D,KAAO6D,KAAKxC,MAAMC,UACvBwC,EAAiB9E,KAAK,CAClB+E,GAAI/D,EACJgE,OAAQH,KAAKxC,MAAMC,UAAUtB,KAGrC,IAAIiE,EACAvD,EAAAvB,EAAAC,cAAA,QAAM8E,SAAUL,KAAKxB,cAChByB,EAAiBhE,IAAI,SAAAqE,GAAW,OAC7BzD,EAAAvB,EAAAC,cAACc,EAAA,EAAD,CACAF,IAAKmE,EAAYJ,GACjB7E,YAAaiF,EAAYH,OAAO9E,YAChCO,cAAe0E,EAAYH,OAAOvE,cAClCG,QAAS,SAAC0C,GAAD,OAASsB,EAAKR,oBAAoBd,EAAO6B,EAAYJ,KAC9DlF,SAAUsF,EAAYH,OAAOpC,MAC7B9C,eAAgBqF,EAAYH,OAAOtC,WACnC3C,QAASoF,EAAYH,OAAOjF,QAC5BW,MAAOyE,EAAYH,OAAOtE,UAG9BgB,EAAAvB,EAAAC,cAAC4B,EAAA,EAAD,CAAQC,QAAQ,UAAUmD,UAAWP,KAAKxC,MAAMe,aAAhD,UAMR,OAHKyB,KAAKrF,MAAMkE,UACZuB,EAAOvD,EAAAvB,EAAAC,cAACiF,EAAA,EAAD,OAGP3D,EAAAvB,EAAAC,cAAA,OAAKG,UAAWZ,IAAQ6B,aACpBE,EAAAvB,EAAAC,cAAA,qCACC6E,UA7JSK,aAmLXC,cAhBS,SAAAlD,GACpB,MAAO,CACHyB,KAAMzB,EAAMmD,cAAczD,YAC1BgC,MAAO1B,EAAMmD,cAAcC,WAC3B/B,QAASrB,EAAMwB,MAAMH,QACrBS,MAAO9B,EAAMqD,KAAKvB,MAClBF,OAAQ5B,EAAMqD,KAAKzB,SAIA,SAAA0B,GACvB,MAAM,CACFzB,eAAgB,SAACF,EAAWG,GAAZ,OAAsBwB,EAASC,IAAuB5B,EAAWG,OAI1EoB,CAA6CM,YAAiBrE,EAAasE,uBC1LpFC,6MAEJC,yBAA2B,WACzBxC,EAAKhE,MAAMyG,QAAQC,YAGrBC,yBAA2B,WACzB3C,EAAKhE,MAAMyG,QAAQG,QAAQ,mGAI3B,IAAIC,EAAU3E,EAAAvB,EAAAC,cAACkG,EAAA,EAAD,CAAUC,GAAG,MAE3B,GAAI1B,KAAKrF,MAAMsE,KAAK,CAClB,IAAM0C,EAAoB3B,KAAKrF,MAAMiH,UAAY/E,EAAAvB,EAAAC,cAACkG,EAAA,EAAD,CAAUC,GAAG,MAAQ,KACtEF,EAAW3E,EAAAvB,EAAAC,cAAA,WACRoG,EACD9E,EAAAvB,EAAAC,cAACsG,EAAD,CACA3E,YAAa8C,KAAKrF,MAAMsE,KACxB3B,kBAAmB0C,KAAKmB,yBACxB5D,kBAAmByC,KAAKsB,2BAE1BzE,EAAAvB,EAAAC,cAACuG,EAAA,EAAD,CACIC,KAAM/B,KAAKrF,MAAMqH,MAAMD,KAAO,gBAC9BE,UAAWtF,KAIjB,OAAO6E,SA5BYf,aAuCRC,sBAPS,SAAAlD,GACtB,MAAM,CACJyB,KAAMzB,EAAMmD,cAAczD,YAC1B0E,UAAWpE,EAAMwB,MAAM4C,YAIZlB,CAAyBQ","file":"static/js/1.3f282026.chunk.js","sourcesContent":["import React from 'react'\n\nimport classes from './Input.css'\n\nconst input = (props) => {\n    let inputElement = null\n    const inputClasses = [classes.InputElement]\n\n\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    switch(props.elementType){\n        case('input'):\n            inputElement = <input className={inputClasses.join(' ')} \n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed}/>;\n            break\n        case('textarea'):\n            inputElement = <textarea className={inputClasses} \n            {...props.elementConfig}\n            value={props.value}\n            onChange={props.changed}/>;\n            break\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input className={inputClasses} \n            {...props.elementConfig}\n            value={props.value}/>\n    }\n\n\n    return(\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\n\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__s67N0\",\"Label\":\"Input__Label___n-1m\",\"InputElement\":\"Input__InputElement__2-aFx\",\"Invalid\":\"Input__Invalid__1sl1p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__1xBm4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1J81r\"};","import React from 'react'\n\nimport Burger from '../../Burger/Burger'\nimport Button from '../../UI/Button/Button'\n\nimport classes from './CheckoutSummary.css'\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINOU</Button>\n        </div>\n    )\n}\n\nexport default checkoutSummary","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\n\nimport Button from '../../../components/UI/Button/Button'\nimport Spinner from '../../../components/UI/Spinner/Spinner'\nimport Input from '../../../components/UI/Input/Input'\n\nimport classes from './ContactData.css'\n\nimport axios from \"../../../axios-orders\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\"\nimport * as actions from '../../../store/actions/index'\nimport {updateObject, checkValidity} from '../../../shared/utility'\n\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false\n    }\n\n    orderHandler = ( event ) => {\n        event.preventDefault();\n        this.setState( { loading: true } );\n        const formData = {}\n        for(let formElementIdentifier in this.state.orderForm){\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\n        }\n        const order = {\n            ingredients: this.props.ings,\n            price: this.props.price,\n            orderData: formData,\n            userId: this.props.userId\n        }\n        this.props.onOrderHandler(order, this.props.token)\n    }\n\n    inputChangedHandler = (event, inputIdentifier ) => {\n        \n        //Dokonuje kopjowania głębokiego\n        const updateFormElement = updateObject(this.state.orderForm[inputIdentifier],{\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n            touched: true\n        })\n        //Dokonuje kopjowania płytkiego\n        const updateOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updateFormElement\n        })\n        updateOrderForm[inputIdentifier] = updateFormElement\n        \n        let formIsValid = true\n        for(let inputIdentifier in updateOrderForm){\n            formIsValid = updateOrderForm[inputIdentifier].valid && formIsValid\n        }\n\n        this.setState({\n            orderForm: updateOrderForm, formIsValid: formIsValid\n        }) \n    }\n\n    render () {\n        const formElementsAray = []\n        for (let key in this.state.orderForm){\n            formElementsAray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            })\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsAray.map(formElement=>(\n                    <Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    changed={(event)=>this.inputChangedHandler(event, formElement.id)}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    value={formElement.config.value}/>\n                ))}\n          \n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if ( this.props.loading ) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        price: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onOrderHandler: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from \"react\";\n\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport ContactData from \"../Checkout/ContactData/ContactData\";\n\nimport { Route, Redirect } from \"react-router-dom\";\nimport {connect} from 'react-redux'\n\nclass Checkout extends Component {\n\n  checkoutCancelledHandler = () => {\n    this.props.history.goBack();\n  };\n\n  checkoutContinuedHandler = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render(){\n    let summary = <Redirect to=\"/\"/>\n    \n    if (this.props.ings){\n      const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null\n      summary = (<div>\n        {purchasedRedirect}\n        <CheckoutSummary\n        ingredients={this.props.ings}\n        checkoutCancelled={this.checkoutCancelledHandler}\n        checkoutContinued={this.checkoutContinuedHandler}\n      />\n      <Route\n          path={this.props.match.path + \"/contact-data\"}\n          component={ContactData}      />\n          </div>\n      )\n    }\n    return summary\n  }\n}\n\nconst mapStateToProps = state => {\n  return{\n    ings: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased  \n  }\n}\n\nexport default connect(mapStateToProps)(Checkout);\n"],"sourceRoot":""}