{"version":3,"sources":["order.js"],"names":["purchaseBurgerSuccess","id","orderData","type","actionTypes","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","token","dispatch","axios","post","then","response","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","userId","queryParams","get","resp","fetchedOrders","key","push","err"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEO,MAAMA,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACpD,SAAM;AACFC,IAAAA,IAAI,EAAEC,WAAW,CAACC,uBADhB;AAEFC,IAAAA,OAAO,EAAEL,EAFP;AAGFC,IAAAA,SAAS,EAAEA;AAHT,GAAN;AAKH,CANM;;;;AAQA,MAAMK,kBAAkB,GAAIC,KAAD,IAAW;AACzC,SAAM;AACFL,IAAAA,IAAI,EAAEC,WAAW,CAACK,oBADhB;AAEFD,IAAAA,KAAK,EAAEA;AAFL,GAAN;AAKH,CANM;;;;AAQA,MAAME,mBAAmB,GAAG,MAAM;AACrC,SAAM;AACFP,IAAAA,IAAI,EAAEC,WAAW,CAACO;AADhB,GAAN;AAGH,CAJM;;;;AAMA,MAAMC,cAAc,GAAG,CAACV,SAAD,EAAWW,KAAX,KAAqB;AAC/C,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACJ,mBAAmB,EAApB,CAAR;;AACAK,yBAAMC,IAAN,CAAY,uBAAuBH,KAAnC,EAA0CX,SAA1C,EACKe,IADL,CACWC,QAAQ,IAAI;AAChBJ,MAAAA,QAAQ,CAACd,qBAAqB,CAACkB,QAAQ,CAACC,IAAT,CAAcC,IAAf,EAAqBlB,SAArB,CAAtB,CAAR;AACF,KAHL,EAIKmB,KAJL,CAIYb,KAAK,IAAI;AACbM,MAAAA,QAAQ,CAACP,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACH,KANL;AAOH,GATD;AAUH,CAXM;;;;AAaA,MAAMc,YAAY,GAAG,MAAM;AAC9B,SAAM;AACFnB,IAAAA,IAAI,EAAEC,WAAW,CAACmB;AADhB,GAAN;AAGH,CAJM;;;;AAMA,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAM;AACFtB,IAAAA,IAAI,EAAEC,WAAW,CAACsB,oBADhB;AAEFD,IAAAA,MAAM,EAAEA;AAFN,GAAN;AAIH,CALM;;;;AAOA,MAAME,eAAe,GAAInB,KAAD,IAAW;AACtC,SAAM;AACFL,IAAAA,IAAI,EAAEC,WAAW,CAACwB,iBADhB;AAEFpB,IAAAA,KAAK,EAAEA;AAFL,GAAN;AAIH,CALM;;;;AAOA,MAAMqB,gBAAgB,GAAG,MAAM;AAClC,SAAM;AACF1B,IAAAA,IAAI,EAAEC,WAAW,CAAC0B;AADhB,GAAN;AAGH,CAJM;;;;AAMA,MAAMC,WAAW,GAAG,CAAClB,KAAD,EAAQmB,MAAR,KAAmB;AAC1C,SAAOlB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACe,gBAAgB,EAAjB,CAAR;AACA,UAAMI,WAAW,GAAG,WAAWpB,KAAX,GAAmB,6BAAnB,GAAmDmB,MAAnD,GAA4D,GAAhF;;AACAjB,yBAAMmB,GAAN,CAAW,iBAAiBD,WAA5B,EACChB,IADD,CACMkB,IAAI,IAAE;AACR,YAAMC,aAAa,GAAG,EAAtB;;AACA,WAAK,IAAIC,GAAT,IAAgBF,IAAI,CAAChB,IAArB,EAA0B;AACtBiB,QAAAA,aAAa,CAACE,IAAd,iCAAuBH,IAAI,CAAChB,IAAL,CAAUkB,GAAV,CAAvB;AAAuCpC,UAAAA,EAAE,EAAEoC;AAA3C;AACH;;AACDvB,MAAAA,QAAQ,CAACU,kBAAkB,CAACY,aAAD,CAAnB,CAAR;AAEH,KARD,EASCf,KATD,CASOkB,GAAG,IAAE;AACRzB,MAAAA,QAAQ,CAACa,eAAe,CAACY,GAAD,CAAhB,CAAR;AACH,KAXD;AAYH,GAfD;AAgBH,CAjBM","sourcesContent":["import * as actionTypes from './actionTypes'\nimport axios from '../../axios-orders'\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return{\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\n        orderId: id,\n        orderData: orderData\n    }\n}\n\nexport const purchaseBurgerFail = (error) => {\n    return{\n        type: actionTypes.PURCHASE_BURGER_FAIL,\n        error: error\n\n    }\n}\n\nexport const purchaseBurgerStart = () => {\n    return{\n        type: actionTypes.PURCHASE_BURGER_START\n    }\n}\n\nexport const purchaseBurger = (orderData,token) => {\n    return dispatch => {\n        dispatch(purchaseBurgerStart())\n        axios.post( '/orders.json?auth=' + token, orderData )\n            .then( response => {\n               dispatch(purchaseBurgerSuccess(response.data.name, orderData))\n            } )\n            .catch( error => {\n                dispatch(purchaseBurgerFail(error))\n            } );\n    }\n}\n\nexport const purchaseInit = () => {\n    return{\n        type: actionTypes.PURCHASE_INIT\n    }\n}\n\nexport const fetchOrdersSuccess = (orders) => {\n    return{\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\n        orders: orders\n    }\n}\n\nexport const fetchOrdersFail = (error) => {\n    return{\n        type: actionTypes.FETCH_ORDERS_FAIL,\n        error: error\n    }\n}\n\nexport const fetchOrdersStart = () => {\n    return{\n        type: actionTypes.FETCH_ORDERS_START\n    }\n}\n\nexport const fetchOrders = (token, userId) => {\n    return dispatch => {\n        dispatch(fetchOrdersStart());\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n        axios.get( '/orders.json' + queryParams)\n        .then(resp=>{\n            const fetchedOrders = []\n            for (let key in resp.data){\n                fetchedOrders.push({...resp.data[key], id: key})\n            }\n            dispatch(fetchOrdersSuccess(fetchedOrders))\n            \n        })\n        .catch(err=>{\n            dispatch(fetchOrdersFail(err))\n        })\n    }\n}"]}