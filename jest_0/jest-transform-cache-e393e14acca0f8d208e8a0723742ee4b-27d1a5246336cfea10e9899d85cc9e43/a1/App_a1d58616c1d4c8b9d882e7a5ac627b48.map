{"version":3,"sources":["App.js"],"names":["asyncCheckout","asyncOrders","asyncAuth","App","Component","componentDidMount","props","onTryAutoSignup","render","routes","BurgerBuilder","isAuthenticated","Logout","mapStateToProps","state","auth","token","mapDispatchToProps","dispatch","actions","authCheckState"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;AAEA,MAAMA,aAAa,GAAG,6BAAe,MAAI;AACvC,oFAAc,gCAAd;AACD,CAFqB,CAAtB;AAIA,MAAMC,WAAW,GAAG,6BAAe,MAAI;AACrC,oFAAc,4BAAd;AACD,CAFmB,CAApB;AAIA,MAAMC,SAAS,GAAG,6BAAe,MAAI;AACnC,oFAAc,wBAAd;AACD,CAFiB,CAAlB;;AAIA,MAAMC,GAAN,SAAkBC,gBAAlB,CAA4B;AAC1BC,EAAAA,iBAAiB,GAAE;AACjB,SAAKC,KAAL,CAAWC,eAAX;AACD;;AAEDC,EAAAA,MAAM,GAAG;AAEP,QAAIC,MAAM,GACR,6BAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6BAAC,qBAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAEP,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,6BAAC,qBAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAgB,MAAA,KAAK,MAArB;AAAsB,MAAA,SAAS,EAAEQ,sBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,6BAAC,wBAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;;AAQA,QAAG,KAAKJ,KAAL,CAAWK,eAAd,EAA8B;AAC5BF,MAAAA,MAAM,GACJ,6BAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,6BAAC,qBAAD;AAAO,QAAA,IAAI,EAAC,WAAZ;AAAwB,QAAA,SAAS,EAAET,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,6BAAC,qBAAD;AAAO,QAAA,IAAI,EAAC,SAAZ;AAAsB,QAAA,SAAS,EAAEC,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,6BAAC,qBAAD;AAAO,QAAA,IAAI,EAAC,SAAZ;AAAsB,QAAA,SAAS,EAAEW,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII,6BAAC,qBAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAEV,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI,6BAAC,qBAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAsB,QAAA,SAAS,EAAEQ,sBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAMI,6BAAC,wBAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADF;AAUD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,6BAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,MADH,CADF,CADF;AAOD;;AAnCyB;;AAsC5B,MAAMI,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAM;AACJH,IAAAA,eAAe,EAAEG,KAAK,CAACC,IAAN,CAAWC,KAAX,KAAqB;AADlC,GAAN;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAM;AACJX,IAAAA,eAAe,EAAE,MAAMW,QAAQ,CAACC,OAAO,CAACC,cAAR,EAAD;AAD3B,GAAN;AAGD,CAJD;;eAMe,gCAAW,yBAAQP,eAAR,EAAwBI,kBAAxB,EAA4Cd,GAA5C,CAAX,C","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport Layout from './components/Layout/Layout'\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder'\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom'\nimport Logout from './containers/Auth/Logout/Logout'\nimport { connect } from 'react-redux'\nimport * as actions from './store/actions/index'\nimport asyncComponent from './hoc/asyncComponent/asyncComponent'\n\nconst asyncCheckout = asyncComponent(()=>{\n  return import('./containers/Checkout/Checkout')\n})\n\nconst asyncOrders = asyncComponent(()=>{\n  return import('./containers/Orders/Orders')\n})\n\nconst asyncAuth = asyncComponent(()=>{\n  return import('./containers/Auth/Auth')\n})\n\nclass App extends Component {\n  componentDidMount(){\n    this.props.onTryAutoSignup()\n  }\n\n  render() {\n\n    let routes = (\n      <Switch>\n        <Route path=\"/auth\" component={asyncAuth}/>\n        <Route path=\"/\" exact component={BurgerBuilder}/>\n        <Redirect to='/'/>\n      </Switch>\n    )\n\n    if(this.props.isAuthenticated){\n      routes=(\n        <Switch>\n            <Route path=\"/checkout\" component={asyncCheckout}/>\n            <Route path=\"/orders\" component={asyncOrders}/>\n            <Route path=\"/logout\" component={Logout}/>\n            <Route path=\"/auth\" component={asyncAuth}/>\n            <Route path=\"/\" exact component={BurgerBuilder}/>\n            <Redirect to='/'/>\n        </Switch>\n      )\n    }\n\n    return (\n      <div>\n        <Layout>\n          {routes}\n        </Layout>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return{\n    isAuthenticated: state.auth.token !== null\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return{\n    onTryAutoSignup: () => dispatch(actions.authCheckState())\n  }\n}\n\nexport default withRouter(connect(mapStateToProps,mapDispatchToProps)(App));\n"]}