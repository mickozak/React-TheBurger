a0d41ba49699867850055a2725e561b8
"use strict";

var _interopRequireDefault = require("/home/programowanie4/Pulpit/Luty/React-TheBurger/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/programowanie4/Pulpit/Luty/React-TheBurger/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.authCheckState = exports.setAuthRedirectPath = exports.auth = exports.checkAuthTimeOut = exports.logout = exports.authFail = exports.authSuccess = exports.authStart = void 0;

var actionTypes = _interopRequireWildcard(require("./actionTypes"));

var _axios = _interopRequireDefault(require("axios"));

const authStart = () => {
  return {
    type: actionTypes.AUTH_START
  };
};

exports.authStart = authStart;

const authSuccess = (token, userId) => {
  return {
    type: actionTypes.AUTH_SUCCESS,
    idToken: token,
    userId: userId
  };
};

exports.authSuccess = authSuccess;

const authFail = error => {
  return {
    type: actionTypes.AUTH_FAIL,
    error: error
  };
};

exports.authFail = authFail;

const logout = () => {
  localStorage.removeItem('token');
  localStorage.removeItem('expirationDate');
  localStorage.removeItem('localId');
  return {
    type: actionTypes.AUTH_LOGOUT
  };
};

exports.logout = logout;

const checkAuthTimeOut = expirationTime => {
  return dispatch => {
    setTimeout(() => {
      dispatch(logout());
    }, expirationTime * 1000);
  };
};

exports.checkAuthTimeOut = checkAuthTimeOut;

const auth = (email, password, isSignUp) => {
  return dispatch => {
    dispatch(authStart());
    const authData = {
      email: email,
      password: password,
      returnSecureToken: true
    };
    let url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDEEx2G2BLB7YwRVPqMEVUHCKsQj3ZRRL0';

    if (!isSignUp) {
      url = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDEEx2G2BLB7YwRVPqMEVUHCKsQj3ZRRL0';
    }

    _axios.default.post(url, authData).then(response => {
      const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);
      localStorage.setItem('token', response.data.idToken);
      localStorage.setItem('expirationDate', expirationDate);
      localStorage.setItem('userId', response.data.localId);
      dispatch(authSuccess(response.data.idToken, response.data.localId));
      dispatch(checkAuthTimeOut(response.data.expiresIn));
    }).catch(err => {
      console.log(err);
      dispatch(authFail(err.response.data.error));
    });
  };
};

exports.auth = auth;

const setAuthRedirectPath = path => {
  return {
    type: actionTypes.SET_AUTH_REDIRECT_PATH,
    path: path
  };
};

exports.setAuthRedirectPath = setAuthRedirectPath;

const authCheckState = () => {
  return dispatch => {
    const token = localStorage.getItem('token');

    if (!token) {
      dispatch(logout);
    } else {
      const expirationDate = new Date(localStorage.getItem('expirationDate'));

      if (expirationDate <= new Date()) {
        dispatch(logout());
      } else {
        const userId = localStorage.getItem('userId');
        dispatch(authSuccess(token, userId));
        dispatch(checkAuthTimeOut(expirationDate.getTime() - new Date().getTime()));
      }
    }
  };
};

exports.authCheckState = authCheckState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,