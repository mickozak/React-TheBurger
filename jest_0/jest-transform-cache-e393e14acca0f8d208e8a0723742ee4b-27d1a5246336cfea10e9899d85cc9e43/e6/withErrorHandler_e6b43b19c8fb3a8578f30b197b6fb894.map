{"version":3,"sources":["withErrorHandler.js"],"names":["withErrorHandler","WrappedComponent","axios","Component","state","error","errorConfirmedHandler","setState","componentWillMount","reqInterceptors","interceptors","request","use","req","resInterceptors","response","res","componentWillUnmount","eject","render","message","props"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AACA;;;;AAIA,MAAMA,gBAAgB,GAAG,CAACC,gBAAD,EAAmBC,KAAnB,KAA6B;AAAA;;AACpD,iBAAO,cAAcC,gBAAd,CAAwB;AAAA;AAAA;AAAA,WAC7BC,KAD6B,GACvB;AACFC,QAAAA,KAAK,EAAE;AADL,OADuB;;AAAA,WA0B7BC,qBA1B6B,GA0BL,MAAM;AAC1B,aAAKC,QAAL,CAAc;AACVF,UAAAA,KAAK,EAAE;AADG,SAAd;AAGH,OA9B4B;AAAA;;AAK7BG,IAAAA,kBAAkB,GAAE;AAChB,WAAKC,eAAL,GAAuBP,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BC,GAAG,IAAG;AACxD,aAAKN,QAAL,CAAc;AACVF,UAAAA,KAAK,EAAE;AADG,SAAd;AAGA,eAAOQ,GAAP;AACH,OALsB,CAAvB;AAMA,WAAKC,eAAL,GAAuBZ,KAAK,CAACQ,YAAN,CAAmBK,QAAnB,CAA4BH,GAA5B,CAAgCI,GAAG,IAAIA,GAAvC,EAA4CX,KAAK,IAAI;AACxE,aAAKE,QAAL,CAAc;AACVF,UAAAA,KAAK,EAAEA;AADG,SAAd;AAGH,OAJsB,CAAvB;AAKH,KAjB4B,CAmB7B;;;AAEAY,IAAAA,oBAAoB,GAAE;AAClBf,MAAAA,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BO,KAA3B,CAAiC,KAAKT,eAAtC;AACAP,MAAAA,KAAK,CAACQ,YAAN,CAAmBC,OAAnB,CAA2BO,KAA3B,CAAiC,KAAKJ,eAAtC;AACH;;AAQDK,IAAAA,MAAM,GAAG;AACP,aACE,6BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,cAAD;AAAO,QAAA,IAAI,EAAE,KAAKf,KAAL,CAAWC,KAAxB;AAA+B,QAAA,WAAW,EAAE,KAAKC,qBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyE,KAAKF,KAAL,CAAWC,KAAX,GAAmB,KAAKD,KAAL,CAAWC,KAAX,CAAiBe,OAApC,GAA8C,IAAvH,CADF,EAEE,6BAAC,gBAAD,oBAAsB,KAAKC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,CADF;AAMD;;AAvC4B,GAA/B;AAyCD,CA1CD;;eA4CerB,gB","sourcesContent":["import React, { Component } from \"react\";\n\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport Aux from \"../../hoc/Aux\";\n\n\n\nconst withErrorHandler = (WrappedComponent, axios) => {\n  return class extends Component {\n    state={\n        error: null\n    }\n\n    componentWillMount(){\n        this.reqInterceptors = axios.interceptors.request.use(req=> {\n            this.setState({\n                error: null\n            })\n            return req\n        })\n        this.resInterceptors = axios.interceptors.response.use(res => res, error => {\n            this.setState({\n                error: error\n            })\n        })\n    }\n\n    //stosujemy go bo w przypadku owinięcia innych komponentów dane będą się mieszać\n\n    componentWillUnmount(){\n        axios.interceptors.request.eject(this.reqInterceptors)\n        axios.interceptors.request.eject(this.resInterceptors)\n    }\n\n    errorConfirmedHandler = () => {\n        this.setState({\n            error: null\n        })\n    }\n\n    render() {\n      return (\n        <Aux>\n          <Modal show={this.state.error} modalClosed={this.errorConfirmedHandler}>{this.state.error ? this.state.error.message : null}</Modal>\n          <WrappedComponent {...this.props} />\n        </Aux>\n      );\n    }\n  };\n};\n\nexport default withErrorHandler;\n"]}